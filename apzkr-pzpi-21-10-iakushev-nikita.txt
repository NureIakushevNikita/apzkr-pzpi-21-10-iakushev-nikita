РЕФЕРАТ


	Пояснювальна записка: 59 сторінок, 4 додатки, 11 рисунків, 2 таблиці, 5 переліків посилання.
	АДМІНІСТРАТОР ТОРГІВЕЛЬНОГО ЦЕНТРУ, ВІДВІДУВАННЯ МАГАЗИНУ, ЗАМОВЛЕННЯ, МАГАЗИН, МЕРЕЖА ТОРГІВЕЛЬНИХ ЦЕНТРІВ, РОБІТНИК МАГАЗИНУ, РОБОЧІ ЗМІНИ, ТОРГІВЕЛЬНИЙ ЦЕНТР.
	 Об’єктом розробки є проблема щодо організації роботи сучасних торгівельних центрів. Організація роботи торгівельних центрів включає в себе продаж та купівля товарів, управляння покупками та замовленнями, організація робочих змін для робітників, аналіз кількості відвідувань магазинів торгівельних центрів. Усі ці перелічені процеси мають бути автоматизовані, для полегшення роботи торгівельних центрів.
	Метою роботи є створення програмної системи для організації роботи торгівельного центру, яка дозволяє створювати замовлення, управляти ними, автоматично розробляти робочий графік для робітників, створювати персонал для магазину, управляти даними щодо відвідування магазинів покупцями, отримувати результати аналізу даних щодо відвідування.
	В якості методів розробки було обрано: мову програмування Java Script та фреймворк Node JS для розробки серверної частини, хмарну реляційну модель бази даних SQL Server для зберігання даних користувачів, мову програмування Java Script та бібліотеку React для розробки клієнтської частини, мову програмування Kotlin для розробки мобільної частини програмної системи для платформи Android. А також для розгортання програмної системи було обрано хмарний сервіс Microsoft Azure та контейнерний метод розгортання.
	В результаті виконання курсової роботи було спроєктовано та розроблено програмну систему для організації роботи торгівельного центру, яка включає в себе серверну частину, клієнтську частину та мобільну частину.


ЗМІСТ


Вступ…………………………………………………………………………………….6
1	Загальні відомості щодо програмної системи……………………..........................7
1.1.	Специфікація програмного забезпечення……………………………………...7
1.2.	Архітектура програмного забезпечення……………………………………….7
2	Розробка серверної частини програмної системи…………………………………9
2.1.	Проєктування серверної частини………………………………………………9
2.2.	Опис бази даних та сховища даних…………………………………………...11
2.3.	Архітектура серверної частини……………………………………………….13
2.4.	Опис специфікації Rest API…………………………………………………...13
2.5.	Кодування серверної частини…………………………………………………13
2.6.	Опис дотриманих вимог щодо захисту даних та безпеки даних в системі….14
2.7.	Реалізація локалізації та інтернаціоналізації в системі……………………...15
3	Розробка клієнтської частини програмної системи……………………………...16
3.1.	Архітектура клієнтської частини………………………………………..........16
3.2.	Кодування клієнтської частини……………………………………….………18
4	Розробка мобільної частини програмної системи……………………………….19
4.1.	Проєктування мобільної частини……………………………………………..19
4.2.	Архітектура мобільної частини……………………….………………………21
4.3.	Реалізація локалізації в мобільній частині…………………………………...23
Висновки……………………………………………………………………………….24
Перелік джерел посилання…………………………………………………………...25
Додаток А Специфікація програмного забезпечення……………..………………..26
Додаток Б Таблиця для опису специфікації Rest API………………………………40
Додаток В Програмний код серверної частини……………………………………..47
Додаток Г Програмний код Клієнтської частини…………………………………...52


ВСТУП


	Ми маємо декілька проблем щодо роботи сучасних торгівельних центрів. Серед проблем можна виділити продаж та купівля товарів, управління замовленнями покупців, організацію робочих змін для працівників та визначення рівня зацікавленості покупців магазинами. Отже, пошук вирішення даних проблем і став поштовхом до створення програмної системи для організації роботи торгівельного центру.
	Наша програмна система є актуальною, тому що на сьогоднішній день відсутнє комплексне рішення усіх перелічених проблем користувачів.
	Наша програмна система орієнтована на сферу електронної комерції, бізнесу, а також на управління робочими місцями та графіками роботи працівників магазинів.
	Отже, метою курсової роботи є створення програмної система для організації роботи торгівельного центру, яка складається з серверної, клієнтської та мобільної частин, та вирішує проблеми купівлі та продажу товарів у торгівельних центрах, управління замовленнями покупців, організації робочих змін у магазинах, визначення зацікавленості покупців магазинами.


1 ЗАГАЛЬНІ ВІДОМОСТІ ЩОДО ПРОГРАМНОЇ СИСТЕМИ
	1.1 Специфікація програмного забезпечення


	Для розробки програмного забезпечення необхідний спеціальний документ – специфікація ПЗ, в якому буде наведено опис предметної галузі розробки, загальні  та програмні вимоги до системи. Розроблену специфікацію програмного забезпечення наведено в додатку А.


	1.2 Архітектура програмної системи


	Архітектура нашої програмної системи має назву багаторівнева клієнт-серверна архітектура [1-2].
	Ми маємо такі рівні в нашій архітектурі:
а)	клієнтський рівень;
1)	веб-клієнт – браузерний застосунок, який взаємодіє з користувачем та відправляє запити до серверу;
2)	мобільний клієнт – Android-застосунок, який також взаємодіє з користувачем та відправляє запити до серверу застосунків;
б)	серверний рівень;
1)	сервер – обробляє бізнес-логіку, виконує обчислення, перевіряє права доступу, оброблює дані користувачів;
2)	веб-сервер – обслуговує веб-клієнт, передаючи файли веб-сторінок та перенаправляючи запити до серверу;
в)	рівень даних;
1)	база даних – зберігає дані, забезпечує їх цілісність та надає до них доступ;
2)	сховище blob-об’єктів – зберігає контейнери, в яких знаходяться зображення, які відображаються на веб-клієнті.
	Відобразимо нашу архітектуру на діаграмі розгортання (див. рис. 1.1).


Рисунок 1.1 – Діаграма розгортання програмної системи

	Таким чином, ми побудували діаграму розгортання, яка показує нам загальну архітектуру нашої програмної системи, та як компоненти системи взаємодіють між собою.


2 РОЗРОБКА СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ
	2.1 Проєктування серверної частини


	Першим чином виділимо акторів програмної системи, які будуть виконувати функції в системі:
-	Користувач: відвідувач торгівельного центру, який здійснює покупки в магазинах.
-	Адміністратор торгівельного центру: користувач, який управляє працівниками торгівельного центру та асортиментом магазинів.
-	Робітник магазину: управляє замовленнями користувачів.
	Відобразимо даних акторів та відповідні їм доступні функції на Use-case діаграмі. На рисунку 2.1 наведено Use-case діаграму для звичайного користувача.


Рисунок 2.1 – Use-case діаграма для користувача
	На рисунку 2.2 наведено Use-case діаграму для адміністратора торгівельного центру та робітника магазину.


Рисунок 2.2 – Use-case діаграма для адміністратора торгівельного центру та робітника магазину

	Далі спроєктуєму UML діаграму станів нашої програмної системи.
	Для створення діаграми станів виділимо такі основні стани в системі:
-	Авторизація та реєстрація.
-	Оформлення замовлення.
-	Робота з даними про відвідування магазинів користувачем.
-	Особистий кабінет.
-	Керування замовленнями користувачів.
-	Налаштування робочих змін для робітників.
-	Експорт даних.
	Розроблену діаграму станів наведено на рисунку 2.3


Рисунок 2.3 – UML діаграма станів програмної системи

	Отже, ми створили діаграму станів, яка показує поведінку системи в залежності від поточного стану.


	2.2 Опис бази даних та сховища даних


	Виділимо такі сутності в нашій програмній системі:
-	Користувач: містить інформацію про всіх користувачів системи.
-	Робітник: робітник магазину торгівельного центру.
-	Адміністратор: адміністратор торгівельного центру.
-	Замовлення: замовлення, які здійснюють користувачі.
-	Деталі замовлення: товари, які містяться в замовленні.
-	Знижка: знижка, яка застосовується користувачем до замовлення, для пониження вартості товарів.
-	Мережа торгівельних центрів: окремі торгівельні центри організовують мережу.
-	Торгівельний центр: сукупність магазинів.
-	Магазин: містить товари, які користувачі можуть придбати.
-	Товар: товар магазину, який може придбати користувач.
-	Відвідування: містить інформацію про вхід користувача в магазин та його вихід з магазину.
-	Зміна: зміна робітника в магазині.
	Усі дані нашої програмної системи є структурованими, тому було обрано саме реляційну модель для зберігання даних. Але також в системі присутні неструктуровані елементи, наприклад фото, які будуть відображатися на веб-сторінках. Для зберігання фото-об’єктів використаємо окреме від бази даних сховище даних.
	В якості бази даних було обрано Azure SQL Database, яка буде працювати за допомоги SQL Server [3]. А в якості сховища даних використано Azure Blob-storage, для зберігання Blob-об’єктів.
	На рисунку 2.4 наведено ER-модель даних.


Рисунок 2.4 – ER-модель даних

	ER-модель даних показує нам структуру бази даних системи та взаємозв’язок між сутностями.


	2.3 Архітектура серверної частини


	За архітектуру для проєкту було взято MVC архітектуру. Її суть полягає в тому, що ми розділяємо проєкт на окремі компоненти. В нашому випадку ми виділили такі компоненти:
-	Models – моделі, класи, які описують наші сутності в базі даних.
-	Controllers – контролери, оброблюють дані користувачів. Тут реалізована уся бізнес логіка застосунку.
-	Routes – маршрути, відповідають за відображення даних користувачу, а також за запити від сервера або до серверу.


	2.4 Опис специфікації Rest API


	Для взаємодії серверу з іншими програмними шарами використовується Rest API. Опис специфікації Rest API наведено в таблиці Б.1.


	2.5 Кодування серверної частини


	На серверній частини реалізовано математичні методи для обробки даних користувачів, бізнес логіка та можливості управління бізнес логікою.
	Наведемо основну бізнес логіку:
-	Логіка роботи магазинів торгівельних центрів: реалізовано роботу магазину за допомогою методів для створення замовлень, додавання товарів до замовлень. Приклад програмного коду, який створює нове замовлення, наведено в додатку В. Даний метод створює нове замовлення та оброблює кількість товару на складі. У випадку недостатньої кількості товару користувач буде повідомлений.
-	Генерація та застосування знижки на замовлення для користувачів: реалізовано метод генерації знижки для користувачів, в залежності від кількості їх замовлень та витраченої суми грошей. Та також реалізовано метод застосування знижки до товару, в такому випадку ціна на товар зміниться на вказаний відсоток. Програмний код методів наведено в додатку В.
-	Автоматична генерація робочих змін для робітників: реалізовано метод, який автоматично додає робітнику нові робочі зміни на декілька днів в майбутнє, з врахування вихідних дней. Програмний код методу наведено в додатку В.
-	Аналіз відвідування магазинів користувачами: реалізовано метод, який підраховує та аналізує кількість користувачів в магазинах за деякий період, порівнює с поточним періодом, та робить висновок на скільки магазин завантажений на поточний час. Програмний код методу наведено в додатку В.


	2.6 Опис дотриманих вимог щодо захисту даних та безпеки в системі


	Відповідно до вимог щодо безпеки у програмній системі використовуються такі методи захисту даних:
-	Шифрування даних: у хмарній базі даних використовується шифрування даних, щоб ніхто не зміг отримати доступ до даних користувачів.
-	Хешування паролів: паролі користувачів, які зберігаються в базі даних захешовані, щоб ніхто не міг отримати до них доступ.
-	JWT токен: при авторизації користувача генерується Java Web Token, який має час існування 24 години. За допомогою цього токену сервер перевіряє, чи дійсно користувач авторизувався в системі та надає доступ до функціоналу.
	2.7 Реалізація локалізації та інтернаціоналізації в системі


	Відповідно до вимог до локалізації та інтернаціоналізації користувач може отримати текстові дані як англійською, так й українською мовою. Також, грошова валюта може бути оброблена в системі як в українських гривнях, так і в доларах США.


3 РОЗРОБКА КЛІЄНТСЬКОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ
	3.1 Архітектура клієнтської частини


	Структура клієнтської частини програмної системи має назву вертикальна слайсова архітектура. Відповідно до неї, ми маємо такі структурні директорії в даній частині:
-	pages – містить усі веб-сторінки, які відображаються користувачу;
-	components – деякі невеликі частини сторінок або інтерфейсу, які можуть використовуватися на веб-сторінках багато разів;
-	styles – CSS стилі, для коректного відображення веб-сторінок.
	Побудуємо діаграму пакетів, яка відобразить структуру клієнтської частини.


Рисунок 3.1 – UML діаграма пакетів клієнтської частини програмної системи

	Далі наведено пояснення елементів діаграми:
-	App – головний компонент системи, вхідна точка програми.
-	Styles – CSS стилі веб-сторінок.
-	Components – компоненти клієнтської частини.
-	Pages – веб-сторінки клієнтської частини.
-	Public – статичні файли клієнтської частини.
-	Resources – зображення, які використовуються на веб-сторінках.
	Далі спроєктуємо та створимо UML діаграму компонентів клієнтської частини.
	Для розробки діаграми компонентів були виділені такі структурні компоненти клієнтської частини:
-	Product – товар магазину.
-	Order – замовлення користувача.
-	Store – магазин в торговельному центрі.
-	Mall – торгівельний центр.
-	Shift – робоча зміна в магазині.
-	AttendanceChart – графік відвідування магазину користувачами.
	Розроблена UML діаграма компонентів наведена на рисунку 3.2.


Рисунок 3.2 – UML діаграма компонентів для клієнтської частини програмної системи

	Отже, ми розробили діаграму компонентів, яка показує архітектуру нашої системи з точки зору взаємодії її компонентів.
	3.2 Кодування клієнтської частини


	Клієнтська частина надає графічний інтерфейс для відображення реалізованої бізнес логіки:
-	Робота онлайн магазинів торгівельного центру. Клієнтська частина надає графічний інтерфейс для перегляду товарів магазинів, додавання товарів до кошику, підрахунок вартості замовлення, оформлення замовлення з врахуванням персональної знижки. В додатку Г наведено програмний код сторінки CartPage, де відбувається обробка та відображення кошика користувача, створення замовлення, застосування знижки до замовлення.
-	Робота з робочими змінами робітників в магазинах. Панель адміністратора надає йому функціонал перегляду робочих змін, а також автоматична генерація змін для працівників. Програмний код сторінки ShiftsPage для роботи зі змінами працівників наведено в додатку Г.
-	Сторінка для аналізу відвідування магазинів користувачами. Панель адміністратора надає йому функціонал для перегляду відвідування магазинів в графічному вигляді. А також отримання порад від системи щодо організації роботи магазину на основі відвідування. Програмний код сторінки AttandancePage для відображення графіку наведено в додатку Г.


4 РОЗРОБКА МОБІЛЬНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ
	4.1 Проєктування мобільної частини


	Мобільна частина програмної системи надає функціонал саме для певної ролі користувачів, а саме для робітника магазину торгівельного центру. Тому ми маємо розробити Use-case діаграму окремо для мобільної частини програмної системи. 	Робітник може виконувати наступні дії в системі:
-	Авторизація.
-	Вихід з системи.
-	Перегляд особистого профілю.
-	Перегляд замовлень користувачів. Зміна статусу замовлення.
-	Перегляд усіх та майбутніх робочих змін.
	Розроблена Use-case діаграма мобільної частини наведена на рисунку 4.1.


Рисунок 4.1 – Use-case діаграма мобільної частини програмної системи


	Також побудуємо UML діаграму станів мобільної частини. Для розробки діаграми станів були виділені такі процеси:
-	Авторизація.
-	Особистий профіль робітника.
-	Робота з замовленнями користувачів.
-	Робочі зміни.
	Розроблена діаграма станів наведена на рисунку 4.2.


Рисунок 4.2 – UML діаграма станів мобільної частини програмної системи

	Таким чином, ми побудували UML діаграму станів, яка показує нам поточний стан системи в будь який момент часу.


	4.2 Архітектура мобільної частини


	За архітектуру в застосунку було  взято шаблон MVC. Даний шаблон полягає в тому, щоб розділити структуру проєкту на частини:
-	Model – модель: сутності бази даних, з якими працює система.
-	Controller – контролер: обробляє запити до серверу.
-	View – представлення: відповідає за те, як дані будуть відображені користувачу, тобто графічний інтерфейс користувача.
	Також в структурі присутня допоміжна директорія api. Тека api відповідає за взаємодію мобільного застосунку та серверної частини.
	Створимо діаграму пакетів, для відображення структури нашого застосунку (див. рис. 4.3).


Рисунок 4.3 – UML діаграма пакетів мобільної частини програмної системи

	Далі наведено пояснення елементів діаграми:
-	Models – моделі, які описують сутності, з якими працює програмний код.
-	Controllers – контролери обробляють запити до серверу.
-	Api – налаштування доступу до api серверу.
-	Ui – усі графічні елементи, інтерфейс користувача для відображення даних.
	А також створимо діаграму компонентів мобільної частини (див. рис. 4.4).


Рисунок 4.4 – UML діаграма компонентів мобільної частини програмної системи

	На діаграмі наведено такі структурні компоненти:
-	MainActivity – головна сторінка застосунку, авторизація.
-	HomeActivity – сторінка, на яку потрапляє користувач після успішної авторизації, містить навігаційну панель для переходів на наступні сторінки.
-	HomeFragment – відображає профіль робітника.
-	OrderFragment – відображає замовлення в системі.
-	ShiftsFragment – відображає робочі зміни робітника.

	4.3 Реалізація локалізації в мобільній частині


	Інтерфейс користувача може бути перекладений українською та англійською мовами. Локалізація в даній програмній частині була реалізована за допомогою спеціального вбудованого у середовище розробки редактору для перекладу та файлів ресурсів для рядків.


ВИСНОВКИ


	В результаті виконання курсової роботи була спроєктована та розроблена програмна система для організації роботи торгівельного центру, яка складається з серверної, клієнтської та мобільної частин. Дана система є комплексним рішенням проблем в роботі великих торгівельних центрів, а саме: швидкий та зручний продаж та купівля товарів, управління замовленнями покупців, організація робочих змін для працівників та визначення рівня зацікавленості покупців магазинами.
	Програмна система була розроблена з дотриманням усіх вимог щодо захисту даних та безпеки, локалізації та інтернаціоналізації. Також в системі реалізовано можливість адміністрування, управління даними користувачів, а також можливість експорту даних системи. Було реалізовано складну бізнес логіку, яка використовує математичні методи, для обробки даних користувачів.
	Увесь запланований функціонал було реалізовано в повному обсязі.
	Розроблена програмна система може застосовуватись у сферах електронної комерції, бізнесу, а також для відстеження та управління робочими графіками в торгівельних центрах.
	Також програмну систему було розгорнуто за допомогою сервісу Microsoft Azure, так що вона може працювати не тільки в локальному режимі.


ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ

1.	Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides, Design Patterns. Elements of Reusable Object-oriented Software. Addsion Wesley Longman, Print. India East. Press, 1999. – 417 с.
2.	S. Newman, Monolith to Microservices: Evolutionary Patterns to Transform Your Monolith. O'Reilly Media, Inc., 2020. – 255 c.
3.	Azure SQL documentation – URL: https://learn.microsoft.com/en-us/azure/azure-sql/?view=azuresql (дата звернення: 03.04.2024).
4.	In4Suite ERP – URL: https://www.in4velocity.com/in4suite-erp/ (дата звернення: 24.03.2024).
5.	Software Engineering, Software Development and Systems Integration Partner – AllianceTek – URL: https://www.alliancetek.com/ (дата звернення: 24.03.2024).


ДОДАТОК А
Специфікація програмного забезпечення

1 БІЗНЕС-ВИМОГИ
	1.1 Передумови


	На сьогоднішній день робота торгівельного центру є дуже складним механізмом, який містить багато складових. Такі процеси, як продаж товарів, організація робочих місць в торгівельному центрі, а також аналітика зацікавленості покупців магазинами, можуть бути проблемою для великих мереж торгівельних центрів. Власники таких мереж зацікавлені в отриманні максимального прибутку та ефективному надані послуг, тому перелічені процеси треба автоматизувати або оптимізувати.
	Зі сторони покупців є проблема в придбанні товарів, адже іноді вони не хочуть фізично витрачати час в магазині, щоб обрати товар. Вони хочуть мати можливість обрати товар на онлайн платформі, а отримати його в фізичному магазині або навіть з доставкою до дому. В свою чергу, власники та робітники торгівельного центру зацікавлені у вирішенні даної проблеми, адже їх мета утримати клієнтів та зробити надання послуг максимально зручним та швидким.
	Також робітники та власники мереж торгівельних центрів зацікавлені в ефективній організації робочих місць. Якщо б вони мали інформацію про відвідування клієнтами магазинів, то могли ефективно створювати графіки для робітників, спираючись на аналітику відвідування магазинів.
	 Саме ці перелічені потреби та проблеми стали передумовою для створення програмної системи для організації роботи торгівельного центру.


	1.2 Бізнес-можливості


	Програмна система для організації роботи торгівельного центру	не є новою ідеєю, та вже має деякі реалізації на ринку.
	Один з таких конкурентів має назву «In4Suite» [4]. Даний сервіс надає послуги керування доходами та витратами для торгівельних центрів, управління арендою, звітність по ефективності роботи торгівельного центру. Це потужний інструмент, але його недоліком є те, що він створений саме для власників торгівельних центрів та менеджерів, та ніяк не вирішує потреби звичайних покупців.
	Іншим конкурентом є «AllianceTek» [5]. У порівнянні з попереднім сервісом, цей вже вирішує питання покупців та надає інструменти для просування торгівельного центру серед клієнтів. А також він надає послуги аналітики продаж в торгівельному центрі. Але недоліком даного сервісу є те, що він не вирішує проблему організації робітників торгівельного центру, а охоплює тільки бізнес складову.
	Наш сервіс орієнтований на ринок послуг, а також на ведення бізнесу. Наша програмна система вирішує такий комплекс проблем, який не охоплює ні один конкурент. Саме тому наш сервіс буде виділятися на ринку.
	Монетизація буде відбуватися за допомогою договорів, які будуть укладатися з мережами торгівельних центрів.


	1.3 Бізнес-цілі та критерії успіху


	BO-1: Залучити 10 мереж торгівельних центрів з усього світу.
	ВО-2: Залучити та утримати один мільйон клієнтів за перший рік.
	ВО-3: Залучити клієнтів з країн Європи та США.
	SC-1: Досягнення поставленої кількості мереж торгівельних центрів.
	SC-2: Протягом першого року кількість постійних користувачів сервісу тільки зростає.
	SC-3: Клієнти з країн Європи та США користуються сервісом постійно.


	1.4 Потреби клієнтів або ринку


	Потреби покупців торгівельного центру.
-	Купувати товари онлайн.
-	Відстежувати свої витрати та покупки.
-	Отримувати бонуси та акції від магазинів.
	Потреби власників торгівельного центру.
-	Ефективна організація робочих годин робітників та змін.
-	Утримання клієнтів торгівельного центру.


	1.5 Бізнес-ризики


	Бізнес-ризики, які можуть перешкодити розвитку проєкту та способи їх уникнення:
-	Конкуренція. Так як на ринку вже існують конкурентні компанії в нашій галузі, ми маємо надати користувачам унікальні послуги та функції, які будуть заохочувати користування саме нашим сервісом.
-	Потреба в постійному оновленні продукту. Ми маємо постійно вдосконалювати наш продукт, щоб утримати користувачів і завжди пропонувати кращі умови користування, ніж у конкурентів.
-	Технічні проблеми. Користувачі можуть стикнутися  з проблемами у використанні сервісом, у тому числі й технічними. Саме це може відштовхнути клієнтів у використанні саме нашим сервісом.
-	Законодавство інших країн. Особливості законодавства інших країн може вплинути на доступність в обробці деяких даних, що відповідно вплине на користування сервісом для людей з даних країн. Тому ми маємо дотримуватися правил обробки даних для усіх країн, на які націлений наш продукт та адаптувати сервіс відповідно вимог.


2 КОНЦЕПЦІЯ РІШЕННЯ
	2.1 Окреслення концепції


	Наш програмний продукт представляє собою систему для організації роботи торгівельного центру. Власники мереж торгівельних центрів зможуть розмістити на сервісі свій торгівельний центр. Тобто наш сервіс не є власне онлайн торгівельним центром, ми тільки надаємо послуги для розгортання різних мереж торгівельних центрів на платформі сервісу. Таким чином програмним продуктом можна буде скористатися власникам для організації робочих місць, відстеження зацікавленості клієнтів магазинів. А для покупців система представляє собою сервіс для продажу та покупки товарів з магазинів торгівельного центру, а також для відстеження своїх витрат та покупок в магазинах. Даним сервісом можна буде користуватися через веб-сайт або за допомогою мобільного застосунку.
	Отже, метою нашого програмного продукту є надання послуг для покупки та продажу товарів в торгівельних центрах, відстеження витрат на покупки, організація робочих місць в магазинах торгівельних центрів та відстеження поведінки та рівень зацікавленості покупців.


	2.2 Головна функціональність


	MF-1: Онлайн сервіс для продажу товарів магазинів торгівельного центру. Користувачі зможуть купувати товари з магазинів торгівельного центру за допомогою онлайн сервісу. Отримати замовлені товари можна буде за допомогою доставки по пошті або власне в фізичному магазині в торгівельному центрі.
	MF-2: Особистий кабінет покупця. В особистому кабінеті покупець зможе переглядати історію своїх покупок та замовлень, отримані знижки, та витрачений час відвідування магазинів та власне торгівельного центру.
	MF-3: Система знижок для покупців. Користувачі зможуть отримувати персональні знижки на товари, які будуть надаватися їм при певній кількості товарів в магазині або певній витраченій сумі.
	MF-4: Система для контролю робітників магазинів торгівельного центру. Також в нашій програмній системі буде інтегрована система для контролю робітників. Адміністратор магазину зможе відстежувати загальну кількість робітників в магазині, а також встановлювати кількість робітників в магазині на кожній зміні.
	MF-5: Отримання даних про відвідування магазинів та час відвідування кожного магазину покупцем. Розумний пристрій, який буде відстежувати час приходу та виходу користувача з магазину та вираховувати кількість витраченого часу в магазині. Таким чином ці дані можна використовувати для аналітики відвідування магазинів в торгівельному центрі.
	MF-6: Аналітика даних відвідування магазинів в торгівельному центрі. Дані щодо відвідування магазинів можна використати для визначення навантаження в певні дні та години магазину. В подальшому дану інформацію можна використати для визначення необхідної кількості робітників в магазинах у визначені дні та години, щоб вдосконалити їх роботу.


	2.3 Припущення та залежності


	Припущення:
-	Припускається, що користувачі мають доступ до Інтернету для використання основних функцій продукту.
-	Припускається, що програмний інтерфейс буде зрозумілий користувачам, для можливості користування сервісом.


Залежності:
-	Розробка продукту залежить від доступності та якості зовнішніх сервісів для платежів та збору даних, які можуть бути інтегровані в продукт.
-	Залежність від кількості контрактів, укладених з мережами торгівельних центрів.
-	Залежність від доступності необхідних технологічних платформ та мов програмування для розробки продукту.


3 РАМКИ ТА ОБМЕЖЕННЯ
	3.1 Рамки первинного випуску


	Далі наведено функціональність кожної складової системи, яка буде реалізована в первинному випуску програмного продукту.
Серверна частина:
-	Реєстрація та авторизація користувачів. Система повинна надавати можливість користувачам реєстрації та авторизації з використанням надійних методів аутентифікації.
-	Безпека та захист даних користувачів. Особисті дані користувачів не будуть доступні адміністраторам, паролі будуть зберігатися в хешованому вигляді, авторизація буде відбуватися через згенерований токен доступу.
-	Розподілення користувачів за ролями. В системі користувачі мають наступні ролі: покупець, адміністратор торгівельного центру, робітник магазину торгівельного центру. Користувачі будуть обмежені в функціоналі своїми ролями.
-	Адміністрування системи. Адміністратору торгівельного центру доступні функції адміністрування системи, а саме: функції експорту та імпорту даних, управління асортиментом магазинів, управління даними користувачів.
-	Мережі торгівельних центрів та відповідні в них магазини. Сервер має зберігати інформацію про торгівельні центри та магазини та оброблювати її.
	Інформація про користувачів. Сервер має зберігати інформацію про користувачів системи, також має надавати можливість змінювати її.
	Продаж та покупка товарів, оформлення замовлень. Сервер має зберігати дані про товари магазинів, історію замовлень та покупок, підраховувати вартість покупок та зберігати історію витрат.
	Аналітика даних відвідування магазинів покупцями та статистика. Сервер має зберігати дані про відвідування магазинів покупцями, формувати статистику та аналізувати ці дані. Потім ця аналітика буде застосовуватися для оптимізації робочих годин працівників та змін.
	Клієнтська частина:
-	Авторизація та реєстрація. Сервіс повинен надавати інтерфейс для авторизації та реєстрації користувачів.
-	Локалізація та інтернаціоналізація системи. Інтерфейс користувача має бути перекладеним на англійську та українську мови. А також підтримувати роботу з усіма часовими поясами.
-	Продаж та покупка товарів магазинів торгівельного центру та оформлення замовлень. Користувачу надається інтерфейс для перегляду доступних товарів, оформлення замовлення.
-	Панель адміністрування. Адміністраторам торгівельного центру надається інтерфейс користувача для виконання своїх функцій керування даними користувачів, асортиментом, експорту та імпорту даних.
-	Прийняття замовлень від покупців робітниками магазинів. Робітники магазинів мають інтерфейс для роботи із замовленнями покупців.
-	Особистий кабінет користувача. Покупцю надається інтерфейс користувача для перегляду, редагування своїх даних, перегляду історії покупок та замовлень, витрат.
	Мобільний застосунок:
-	Авторизація. Мобільний застосунок повинен надавати можливість авторизації користувачів.
-	Особистий кабінет користувача. Мобільний застосунок надає покупцю інтерфейс користувача для перегляду, редагування своїх даних, перегляду історії покупок та замовлень, витрат.
-	Продаж та покупка товарів магазинів торгівельного центру та оформлення замовлень. За допомогою мобільного застосунку користувач також зможе переглядати доступні товари магазину та оформлювати замовлення.

	3.2 Рамки наступних випусків


	У подальших випусках програмного продукту будуть реалізовані функції:
-	Оплата товарів через сервіс.
-	Система підписки на сервіс для мереж торгівельних центрів для надання усіх функцій.


	3.3 Обмеження та винятки


	Обмеження, які впливають на роботу нашої системи:
-	Інтернет-з'єднання: наша система потребує доступу до Інтернету для взаємодії з користувачами. Відсутність стабільного Інтернет-з'єднання може призвести до обмеження функціональності або зниження продуктивності.
-	Технічні обмеження: деякі функції системи можуть бути обмежені технічними характеристиками пристроїв користувачів. Наприклад, мобільний застосунок може мати обмежену продуктивність порівняно з веб-версією системи.
-	Безпека: забезпечення конфіденційності та безпеки даних користувачів є пріоритетним завданням. Будь-які обмеження, пов'язані з безпекою, повинні бути дотримані, щоб запобігти можливим загрозам.
Винятки:
-	Інші мережі: винятком є випадки, коли користувачі мають обмежений доступ до Інтернету через обмеженість власного інтернет-з'єднання. У таких випадках наша система може надавати обмежену функціональність офлайн або в обмеженому режимі.
-	Старі пристрої: користувачі зі старими пристроями або обмеженими технічними характеристиками можуть використовувати систему, але з меншою продуктивністю. Наша система повинна має бути оптимізована та забезпечувати підтримку для різних пристроїв і браузерів.
-	Незначні помилки: у випадку незначних помилок або порушень безпеки, система повинна мати механізми виявлення та виправлення проблем для запобігання подальшим порушенням безпеки та збереження даних користувачів.


4 БІЗНЕС-КОНТЕКСТ
	4.1 Профілі зацікавлених сторін


	У таблиці А.1 описані зацікавлені сторони проєкту.

	Таблиця А.1 – Профілі зацікавлених сторін
Зацікавлена сторона	Обмеження	Основні інтереси	Ставлення	Основна цінність
Покупці в торгівельних центрах	Обмеження в загальних функціях системи	Швидке обслуговування в магазині, онлайн придбання товарів	Вимоги до зручності, безпека та конфіденційність даних	Особистий час
Власники торгівельних центрів	Обмеження в бюджеті на просування торгівельного центру	Правильна та ефективна організація працівників на робочих місцях, утримання покупців	Очікують підвищення прибутку після початку користування сервісом	Прибуток
Робітники магазинів торгівельного центру	Обмеження відповідно своєї ролі в системі	Правильно організований робочий графік	Полегшення в роботі за допомогою користування сервісом	Заробітна плата, особистий час


	4.2 Пріоритети проєкту

	Наведені далі пріоритети вимог включать головну функціональність.
-	Онлайн платформа для продажу товарів, оформлення замовлень.
-	Особистий кабінет користувача для відстеження покупок, замовлень та витрат.
-	Система формування знижок та бонусів для покупців.
-	Функціонал для відстеження часу відвідування магазину користувачем.
-	 Оптимізація робочих годин для співробітників на основі навантаження магазинів.
Пріоритети бюджету: основний бюджет проєкту планується на розгортання та подальшу підтримку сервісу.
	До часу випуску програмного продукту планується реалізувати 100 відсотків запланованих функцій, відповідно пункту 2.2 Головна функціональність.


	4.3 Робоче середовище


	Для реалізації проєкту будуть застосовані наступні технології:
-	Для серверної частини веб-розробки буде використаний фреймворк Node JS, мова програмування Java Script та середовище розробки IntelliJ IDEA.
-	Для клієнтської частини веб розробки буде використана бібліотека React, мови програмування HTML, CSS, JavaScript, та середовище розробки Visual Studio Code.
-	Для створення мобільного додатку буде використана мова програмування Kotlin та середовище розробки Android Studio.
-	Для зберігання даних було обрано реляційну модель бази даних, хмарна база даних Azure SQL Database та СУБД Microsoft SQL Server Management Studio.
	Далі зазначено основні вимоги системи:
-	Доступність: система повинна бути доступною для користувачів протягом визначеного робочого часу без істотних перерв у роботі.
-	Надійність: система повинна бути стійкою до помилок та відновлюватися в разі аварій, щоб забезпечити безперебійну роботу.
-	Продуктивність: система повинна працювати швидко та ефективно, забезпечуючи швидкий доступ до даних та виконання операцій.
-	Цілісність: забезпечення цілісності даних та даних користувачів, щоб запобігти втраті або порушенню інформації.


ДОДАТОК Б
Таблиця для опису специфікації Rest API

	Таблиця Б.1 – Опис специфікації Rest API
Контролер: «Користувач»
Метод: GET
URL: /user
Опис: Отримати усіх користувачів
Контролер: «Користувач»
Метод: GET
URL: /profile
Опис: Отримати профіль користувача
Контролер: «Користувач»
Метод: POST
URL: /login
Опис: Авторизація
Контролер: «Користувач»
Метод: POST
URL: /registration
Опис: Реєстрація
Контролер: «Користувач»
Метод: PUT
URL: /savePassword
Опис: Редагувати пароль
Контролер: «Користувач»
Метод: PUT
URL: /saveProfile
Опис: Редагувати профіль
Контролер: «Мережа торгівельних центрів»
Метод: GET
URL: /mallChain
Опис: Отримати усі мережі торгівельних центрів
Контролер: «Мережа торгівельних центрів»
Метод: GET
URL: /mallChain/:id
Опис: Отримати мережу торгівельних центрів за ідентифікатором
Контролер: «Мережа торгівельних центрів»
Метод: POST
URL: /mallChain
Опис: Створити мережу торгівельних центрів
Контролер: «Мережа торгівельних центрів»
Метод: PUT
URL: /mallChain/:id
Опис: Редагувати мережу торгівельних центрів
Контролер: «Мережа торгівельних центрів»
Метод: DELETE
URL: /mallChain/:id
Опис: Видалити мережу торгівельних центрів
Контролер: «Торгівельний центр»
Метод: GET
URL: /mall
Опис: Отримати усі торгівельні центри
Контролер: «Торгівельний центр»
Метод: GET
URL: /mall/:id
Опис: Отримати торгівельний центр за ідентифікатором
Контролер: «Торгівельний центр»
Метод: POST
URL: /mall
Опис: Створити торгівельний центр
Контролер: «Торгівельний центр»
Метод: PUT
URL: /mall/:id
Опис: Редагувати торгівельний центр
Контролер: «Торгівельний центр»
Метод: DELETE
URL: /mall/:id
Опис: Видалити торгівельний центр
Контролер: «Магазин»
Метод: GET
URL: /store
Опис: Отримати усі магазини
Контролер: «Магазин»
Метод: GET
URL: /store/:id
Опис: Отримати магазин за ідентифікатором
Контролер: «Магазин»
Метод: GET
URL: /store/mall/:mallId
Опис: Отримати магазини за ідентифікатором торгівельного центру
Контролер: «Магазин»
Метод: POST
URL: /store
Опис: Створити магазин
Контролер: «Магазин»
Метод: PUT
URL: /store/:id
Опис: Редагувати магазин
Контролер: «Магазин»
Метод: DELETE
URL: /store/:id
Опис: Видалити магазин
Контролер: «Замовлення»
Метод: GET
URL: /order
Опис: Отримати усі замовлення
Контролер: «Замовлення»
Метод: GET
URL: /order/:id
Опис: Отримати замовлення за ідентифікатором
Контролер: «Замовлення»
Метод: GET
URL: /order/user/:id
Опис: Отримати усі замовлення користувача за його ідентифікатором
Контролер: «Замовлення»
Метод: POST
URL: /order
Опис: Створити замовлення
Контролер: «Замовлення»
Метод: PUT
URL: /order/:id
Опис: Редагувати замовлення
Контролер: «Деталі замовлення»
Метод: GET
URL: /orderDetails/order/:id
Опис: Отримати усі деталі замовлення за його ідентифікатором
Контролер: «Деталі замовлення»
Метод: GET
URL: /orderDetails/getSum/:id
Опис: Отримати суму замовлення за його ідентифікатором
Контролер: «Деталі замовлення»
Метод: POST
URL: /orderDetails
Опис: Створити деталі замовлення
Контролер: «Деталі замовлення»
Метод: POST
URL: /applyDiscount/:discount_id/:id
Опис: Застосувати знижку до деталей замовлення
Контролер: «Знижка»
Метод: GET
URL: /discount/:userId
Опис: Отримати усі доступні знижки для користувача за його ідентифікатором
Контролер: «Знижка»
Метод: POST
URL: /discount/:userId
Опис: Створити знижку для користувача за його ідентифікатором
Контролер: «Відвідування»
Метод: GET
URL: /attendanceAnalyze/store/:storeId
Опис: Отримати аналіз відвідування магазину за його ідентифікатором
Контролер: «Відвідування»
Метод: GET
URL: /attendance/store/:storeId/date/:date
Опис: Отримати відвідування магазину в обрану дату
Контролер: «Відвідування»
Метод: GET
URL: /attendance/store/:storeId/range/:dateFrom/:dateTo
Опис: Отримати відвідування магазину в обраний діапазон дат
Контролер: «Відвідування»
Метод: GET
URL: /attendanceCount/store/:storeId/date/:date
Опис: Підрахунок відвідувань в магазині в обрану дату
Контролер: «Відвідування»
Метод: GET
URL: /attendanceCount/store/:storeId/range/:dateFrom/:dateTo
Опис: Підрахунок відвідувань в магазині в обраний діапазон дат
Контролер: «Відвідування»
Метод: POST
URL: /attendance
Опис: Створити новий запис про відвідування
Контролер: «Робітник»
Метод: GET
URL: /worker
Опис: Отримати усіх робітників
Контролер: «Робітник»
Метод: GET
URL: /worker/store/:storeId
Опис: Отримати усіх робітників магазину
Контролер: «Робітник»
Метод: GET
URL: /worker/mall/:mallId
Опис: Отримати усіх робітників торгівельного центру
Контролер: «Робітник»
Метод: POST
URL: /worker
Опис: Створити робітника
Контролер: «Робоча зміна»
Метод: GET
URL: /workersBy/store/:storeId/date/:date
Опис: Отримати робітників, які мають зміни в обраному магазині в обрану дату
Контролер: «Робоча зміна»
Метод: GET
URL: /countWorkersBy/store/:storeId/date/:date
Опис: Підрахувати кількість робітників
Контролер: «Робоча зміна»
Метод: POST
URL: /shift
Опис: Створити зміну
Контролер: «Робоча зміна»
Метод: POST
URL: /generateShifts/:workerId
Опис: Згенерувати кілька змін для робітника